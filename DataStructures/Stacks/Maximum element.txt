import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'getMax' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts STRING_ARRAY operations as parameter.
     */

    public static List<Integer> getMax(List<String> operations) {
    // Write your code here
     Stack<Integer> stack = new Stack<>();
    Stack<Integer> maxStack = new Stack<>();
    ArrayList<Integer> al = new ArrayList<>();
    int poped=0;
    loop :
    for(String s : operations){
        switch(s.charAt(0)){
            
            case '1':
            int newInt = Integer.parseInt(s.substring(2));
           
            stack.push(newInt);
            if(maxStack.isEmpty() || newInt >= maxStack.peek())
            {
                maxStack.push(newInt);
            }
               
           
            break;
            case '2':
             
            if(!stack.isEmpty()){
               poped = stack.pop();
            }
            if(poped == maxStack.peek()){
                maxStack.pop();
            }
            
            break;
            case '3':
            al.add(maxStack.peek());
            break;
            default:
             continue loop;
            
            }
            
            
            
            
        }
         return al;

    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> ops = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            String opsItem = bufferedReader.readLine();
            ops.add(opsItem);
        }

        List<Integer> res = Result.getMax(ops);

        for (int i = 0; i < res.size(); i++) {
            bufferedWriter.write(String.valueOf(res.get(i)));

            if (i != res.size() - 1) {
                bufferedWriter.write("\n");
            }
        }

        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
