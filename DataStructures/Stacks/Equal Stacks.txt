import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {

    /*
     * Complete the 'equalStacks' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY h1
     *  2. INTEGER_ARRAY h2
     *  3. INTEGER_ARRAY h3
     */

    public static int equalStacks(List<Integer> ha1, List<Integer> ha2, List<Integer> ha3) {
     Stack<Integer> s1 = new Stack<Integer>(); //First stack of cylinders
        Stack<Integer> s2 = new Stack<Integer>(); //Second stack of cylinders
        Stack<Integer> s3 = new Stack<Integer>(); //Third stack of cylinders
 
        int h1 = 0; //Height of the first stack
        int h2 = 0; //Height of the second stack
        int h3 = 0; //Height of the third stack
 
        int minStack; //The stack with the smallest height
 
        //Initialize the stacks and their heights
        for(int i = ha1.size()-1; i >= 0 ; i--){
            s1.push(ha1.get(i));
            h1 += ha1.get(i);
        }
 
        for(int i = ha2.size()-1; i >= 0 ; i--){
            s2.push(ha2.get(i));
            h2 += ha2.get(i);
        }
 
        for(int i = ha3.size()-1; i >= 0 ; i--){
            s3.push(ha3.get(i));
            h3 += ha3.get(i);
        }
 
        minStack = Math.min(h1,Math.min(h2,h3)); //Initialize minStack with the minimum height
 
        //Heights are not all equal enter the while loop
        while(h1 != h2 || h1 != h3) {
            //Remove cylinders from stack 1 until your height is <= the smallest
            while(h1 > minStack){
                h1 -= s1.pop();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); //Recalculate min
 
            //Remove cylinders from stack 2 until your height is <= the smallest
            while(h2 > minStack){
                h2 -= s2.pop();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); //Recalculate min
 
            //Remove cylinders from stack 3 until your height is <= the smallest
            while(h3 > minStack){
                h3 -= s3.pop();
            }
            minStack = Math.min(h1,Math.min(h2,h3)); //Recalculate min
 
        }
 
        return minStack;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        int n1 = Integer.parseInt(firstMultipleInput[0]);

        int n2 = Integer.parseInt(firstMultipleInput[1]);

        int n3 = Integer.parseInt(firstMultipleInput[2]);

        String[] h1Temp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> h1 = new ArrayList<>();

        for (int i = 0; i < n1; i++) {
            int h1Item = Integer.parseInt(h1Temp[i]);
            h1.add(h1Item);
        }

        String[] h2Temp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> h2 = new ArrayList<>();

        for (int i = 0; i < n2; i++) {
            int h2Item = Integer.parseInt(h2Temp[i]);
            h2.add(h2Item);
        }

        String[] h3Temp = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

        List<Integer> h3 = new ArrayList<>();

        for (int i = 0; i < n3; i++) {
            int h3Item = Integer.parseInt(h3Temp[i]);
            h3.add(h3Item);
        }

        int result = Result.equalStacks(h1, h2, h3);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
